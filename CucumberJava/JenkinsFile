pipeline {
    agent { 
     dockerfile
            { filename 'Dockerfile'
              args '-u root -v /root/.m2:/root/.m2/repository'   
            
            }
          }
          
    parameters {
        choice(choices: getDates(),
                description: 'Select a date',
                name: 'JOB_DATE')
        choice(name: "TEST_CHOICE",
                description: "Choose a test tag to execute.",
                choices: ["FullSanityTest", "IndexCalculationTest", "ETLFileLoadTest", "SecurityCalculationTest", "ScreeningDiscoverDataTest", "ReportGenerationTest", "ReportConsoleUITest", "EODDashBoardTest", "EODCalibrationTest", "DataValidationJobTest", "MongoDBReadCheck", "T3ReportGenTest", "DataServicesAPITest", "RWTest", "ROTest"])
        choice(choices: ['prod', 'preprod', 'qa', 'qa2'],
                description: 'Test Environment',
                name: 'TEST_ENVIRONMENT')
        password(name: "APP_KEY",
                defaultValue: "fierceApp2023",
                description: "Enter App secretKey")

    }
    stages {
        stage('Source') {
            steps {
                sh 'mvn --version'
                sh 'git --version'
                git branch: 'master',
                    url: 'https://github.com/lokeshsampath/JenkinsTest.git'
            }
        }
        stage('Test') {
            steps {   
                    dir("${env.WORKSPACE}/CucumberJava")
                    {
                    //sh "chmod +x src/test/resources/drivers/chromedriver"
                    sh 'mvn -e clean test' }
            }
        } 
        stage("Reports") {
      steps {
         dir("${env.WORKSPACE}/CucumberJava") 
         {
        cucumber buildStatus: 'null',
          customCssFiles: '',
          customJsFiles: '',
          failedFeaturesNumber: -1,
          failedScenariosNumber: -1,
          failedStepsNumber: -1,
          fileIncludePattern: '**/*.json',
          jsonReportDirectory: 'target/JSONReports',
          pendingStepsNumber: -1,
          skippedStepsNumber: -1,
          sortingMethod: 'ALPHABETICAL',
          undefinedStepsNumber: -1
          }
      }
    }
    }
}

def getDates() {
    def startDate = new Date()
    def dates = []
    (0..7).each {
        def date = startDate - it
        dates << date.format('dd-MMM-yyyy')
    }
    return dates.join('\n')
}
